{
  "head.page.dashboard": "Cardano Blockchain Explorer",
  "head.page.signIn": "Sign In | Cardano Blockchain Explorer",
  "filter.allFilters": "All Filters",
  "filter.epochs": "Epochs",
  "filter.blocks": "Blocks",
  "filter.governanceBody": "Governance Body",
  "filter.transactions": "Transactions",
  "filter.tokens": "Tokens",
  "filter.timeStamp": "Time Stamp",
  "filter.govID": "Governance Body ID",
  "filter.dreps": "DReps",
  "filter.constitutionalCommittee":"Constitutional Committee",
  "filter.stakePoolOperators":"Stake Pool Operators",
  "filter.voitingStake":"Voting Stake",
  "filter.address": "Addresses",
  "filter.pools": "Pools",
  "filter.ADAHanlde": "ADA Handle",
  "filter.scriptHash": "Script Hash",
  "filter.placeholder.searchAll": "Search transactions, address, blocks, epochs, pools...",
  "filter.placeholder.searchAddressPools": "Search Stake Address, Pools",
  "filter.placeholder.search": "Search ...",
  "common.search": "Search",
  "stats.adaPrice": "Ada price",
  "stats.adaPrice.value": "-1,73% (24h)",
  "stats.updatedTime": "Last update a minute ago",
  "glossary.marketCap": "Market cap",
  "glossary.currentEpoch": "Current Epoch",
  "glossary.slot": "Slot",
  "glossary.uniqueAccounts": "Unique Accounts",
  "glossary.endTimestamp": "End Timestamp",
  "glossary.liveStake": "Live Stake",
  "glossary.activeStake": "Active Stake",
  "glossary.circulatingSupply": "Circulating supply",
  "glossary.offTheMaxSupply": "Of the max supply",
  "glossary.txLastTime": "Transactions in the last {{hoursValue}} hours",
  "option.tx.in24h": "in the last 24 hours",
  "option.tx.aWeek": "in a week",
  "option.tx.twoWeeks": "in two weeks",
  "option.tx.aMonth": "in a month",
  "option.tx.threeMonth": "in three months",
  "option.tx.aYear": "in a year",
  "option.tx.threeYear": "in three years",
  "option.tx.all_time": "in all the time",
  "glossary.txTypes": "Transaction Types",
  "glossary.metadata": "Metadata",
  "glossary.withoutSC": "Without smart contracts",
  "glossary.nativeScriptAndSC": "Native Scripts & Smart Contracts",
  "glossary.smartContracts": "Smart Contracts",
  "glossary.simpleTxs": "Simple transactions",
  "glossary.governance": "Governance",
  "glossary.constitutionalCommittee": "Constitutional Committee",
  "glossary.overview": "Governance Overview",
  "glossary.governanceActionDetails": "Governance Action Details",
  "glossary.type.noConfidence": "No Confidence",
  "glossary.type.newCommittee": "New Committee",
  "glossary.type.treasuryWithdrawals": "Treasury Withdrawals",
  "glossary.type.protocolParameterChange": "Protocol Parameter Change",
  "glossary.type.infoAction": "Info Action",
  "glossary.type.hardFork": "Hard Fork",
  "glossary.type.updateConstitution": "Update to the Constitution",
  "glossary.networkMonitoring": "Network Monitoring",
  "glossary.menu.overview": "Overview",
  "cc.currentState": "Current State",
  "cc.proposalPolicy": "Proposal Policy",
  "cc.activeMembers": "Active Members",
  "cc.threshold": "Threshold",
  "cc.governanceVotes": "Governance Votes",
  "cc.upcomingChange": "Upcoming Change",
  "cc.lastChangeTimestamp": "Last Change Timestamp",
  "cc.listMembers": "List of Members",
  "cc.statusHistory": "Status History",
  "cc.member.publicKey": "Public Key",
  "cc.member.status": "Status",
  "cc.member.term": "Term",
  "cc.status.actionType": "Action Type",
  "cc.status.status": "Status",
  "cc.status.creation": "Creation",
  "cc.detail.comitteeMember": "Committee Member",
  "cc.vote.title": "Governance Action Voting Name",
  "cc.detail.publicKey": "Public key",
  "cc.detail.registered": "Registered",
  "cc.detail.termDuration": "Term Duration",
  "cc.detail.votingParticipation": "Voting Participation",
  "cc.detail.lifetimeVotes": "Lifetime Votes",
  "cc.detail.statusHistory": "Status History",
  "cc.detail.registrationInformation": "Registration Information",
  "cc.detail.resignationInformation": "Resignation Information",
  "constitutionalCommittee.page.description": "Explore the role, composition, and current status of the Constitutional Committee responsible for Cardano's governance. Review member details, governance actions, and the proposal policy to understand the decision-making processes that shape the network.",
  "overview.page.description": "Governance actions include types like protocol changes, treasury withdrawals, and hard-fork initiations. Each action has specific approval thresholds, requiring consensus from bodies such as the Constitutional Committee, Delegated Representatives (DReps), and Stake Pool Operators (SPOs), ensuring transparent and effective governance.",
  "govAction.govActionID":"Governance Action ID: ",
  "govAction.actionType":"Action Type",
  "govAction.dateCreated":"Date Created",
  "govAction.status": "Status",
  "time.24h": "24h",
  "time.1d": "1d",
  "time.1w": "1w",
  "time.2w": "2w",
  "time.1m": "1m",
  "time.3m": "3m",
  "time.1y": "1y",
  "time.3y": "3y",
  "time.all_time": "MAX",
  "glossary.transactionHash": "Transaction hash",
  "glossary.block": "Block",
  "common.slot": "Slot",
  "common.from": "From",
  "common.to": "To",
  "info.sortedBlock": "Sorted by blocks produced in the current epoch",
  "info.lastUpdatedTime": "Last updated a few seconds ago",
  "glossary.pool": "Pool",
  "glossary.blocksInCurrentEpoch": "Blocks In Current Epoch",
  "glossary.blocksLifetime": "Blocks Lifetime",
  "common.viewAll": "View All",
  "common.reconnecting": "Reconnecting",
  "common.copyright": "Cardano Foundation. All rights reserved.",
  "common.version": "Version",
  "common.faqs": "FAQs",
  "common.bugBounty": "Bug Bounty",
  "common.termsOfService": "Terms Of Service",
  "common.privacyPolicy": "Privacy Policy",
  "common.noDataAvaiable": "No data available",
  "common.tooltipBugBounty": "Report security issues here",
  "network.mainnet": "Mainnet",
  "network.preprod": "Preprod",
  "network.preview": "Preview",
  "network.sanchonet": "Sanchonet",
  "network.explorer": "Explorer",
  "common.signIn": "Sign In ",
  "common.lastUpdated": "Last updated",
  "common.latestTxs": "Latest Transactions",
  "common.latestStories": "Latest Stories",
  "account.noAccount": "Don't have an account?",
  "account.emailAddress": "Email address",
  "account.password": "Password",
  "account.forgotPassword": "Forgot password",
  "account.connectWallet": "Connect Wallet",
  "account.connectP2PWallet": "Connect Peer Wallet",
  "account.confirmEmailAddress": "Confirm email address",
  "page.signIn": "Sign in",
  "common.wallet": "Wallet",
  "account.confirmPassword": "Confirm password",
  "account.newPassword": "New password",
  "account.agreeToThe": "I agree to the",
  "account.termsAndConditions": "Terms & Conditions",
  "common.and": "and",
  "account.PrivacyPolicy": "Privacy Policy",
  "page.signUp": "Sign Up",
  "account.haveAccount": "Already have an account?",
  "account.signInHere": "Sign in here",
  "account.signatureRequired": "Signature Required!",
  "account.attentionRequired": "Attention Required!",
  "account.allowAccessPublicKey": "Please click on sign button to allow access to your public key",
  "account.enterPasswordAlert": "Please enter your password on mobile phone to connect P2P Wallet",
  "account.sign": "Sign ",
  "account.resetPassword": "Reset Password",
  "account.verifyYourEmail": "Verify Your Account",
  "account.clickForSentEmail": "Click on the link we sent to",
  "account.finishAccSetup": "to finish your account setup",
  "account.connectAWallet": "Connect to a Wallet",
  "account.notInstalled": "Not installed",
  "account.overview": "Account Overview",
  "account.myprofile": "My Profile",
  "account.bookmark": "Bookmark",
  "account.loggedInAs": "You are logged in as",
  "account.lastLogin": "Last Login",
  "common.tnxHash": "Txn Hash",
  "glossary.confirmationRequired": "Confirmation Required",
  "glossary.confirmRemove": "glossary.confirmRemove",
  "message.resetPassword.success": "Your password has been reset successfully",
  "page.dashboard": "Dashboard",
  "glossary.blockchain": "Blockchain",
  "glossary.epochs": "Epochs",
  "glossary.absoluteSlot": "Absolute Slot",
  "glossary.blocks": "Blocks",
  "glossary.transactions": "Transactions",
  "glossary.nativeTokens": "Native Tokens",
  "glossary.pools": "Pools",
  "glossary.topAdaHolder": "Top ADA Holders",
  "glossary.operationalCertificates": "Operational Certificates",
  "glossary.takeAddressRegistrations": "Stake Address Registration",
  "glossary.stakeAddressDeregistration": "Stake Address Deregistration",
  "glossary.stakeDelegations": "Stake Delegation(s)",
  "glossary.poolCertificate": "Pool Certificate",
  "glossary.poolDeregistration": "Pool Deregistration",
  "glossary.instantaneousRewards": "Instantaneous Rewards",
  "glossary.stakingLifecycle": "Staking Lifecycle",
  "glossary.protocolParameters": "Protocol Parameters",
  "glossary.discoverCardano": "Discover Cardano",
  "site.CF": "Cardano Foundation",
  "site.cardanoDocs": "Cardano Docs",
  "site.newsAndBlog": "News and Blog",
  "site.cardanoAcademy": "Cardano Academy",
  "site.developerPortal": "Developer Portal",
  "site.github": "GitHub",
  "message.wallet.changeSuccess": "Change wallet successfully!",
  "message.common.somethingWentWrong": "Something went wrong!",
  "message.common.somethingWentWrongDecrypt": "Unable to decrypt data!",
  "message.bookmark.added": "Bookmark has been added",
  "message.bookmark.maximum": "Maximum bookmarks is {{value}}!",
  "message.bookmark.removed": "Bookmark has been removed",
  "message.common.tryAgain": "Please try again!",
  "message.common.copySuccess": "P2P identifier copied to clipboard!",
  "message.common.copyFailed": "Could not copy text to clipboard.",
  "message.signedOut": "You are now signed out",
  "message.report.generated": "Report generated successfully",
  "message.bookmark.deleted": "Delete bookmark successfully",
  "message.user.signedIn": "You are now signed in",
  "message.common.maxReached": "Maximum reached!",
  "message.tx.txHashnotfound": "Transaction hash not found!",
  "message.privateNote.exist": "Private note is already exists",
  "message.wallet.notFound": "{{walletName}} was not found. Please check if it is installed correctly.",
  "message.wallet.created": "An error has occurred! Please review your setup, such as checking whether you have already created a wallet in your {{walletName}} wallet application.",
  "message.user.rejected": "User rejected the request!",
  "message.report.failedGenerate": "Failed to generate report. Please try again.",
  "message.unableSignIn": "Unable to sign in. Please check your email address and password.",
  "message.submitResetPassword": "Submit successfully. Please check your email to reset password.",
  "validation.emailAddress": "Please enter a valid email address",
  "validation.emailAddress.required": "Please enter Email Address",
  "validation.email.required": "Please enter your Email",
  "validation.email.invalid": "Invalid email information",
  "validation.password.length": "Password has to be from 8 to 30 characters and must contain at least 1 number, 1 special character, 1 uppercase and 1 lowercase letter",
  "validation.password.notMatch": "Password does not match",
  "validation.passwordConfirm": "Please enter your Confirm Password",
  "validation.email.notMatch": "Email address does not match",
  "validation.password": "Please enter your Password",
  "validatation.username.invalid": "Please enter a valid username",
  "message.usernameTaken": "This username is already taken, please choose another name",
  "message.invalidScript": "Invalid script, please try again",
  "message.contracctVarified": "Success! Contract has been verified successfully.",
  "message.changeNetwork": "You are currently connect to {{wrongNetwork}}, please switch to {{correctNetwork}}",
  "message.noResultsFound": "No results found",
  "head.page.epochsList": "Epochs List | Cardano Blockchain Explorer",
  "glossary.Epochs": "Epochs",
  "status.inprogress": "Inprogress",
  "glossary.startTimestamp": "Start Timestamp",
  "glossary.transactionCount": "Transaction Count",
  "glossary.rewardsDistributed": "Rewards Distributed",
  "common.notAvailable": "Not available",
  "common.N/A": "N/A",
  "glossary.totalOutput": "Total Output",
  "glossary.finished": "Finished",
  "common.submit": "Submit",
  "common.of": "Of",
  "common.or": "or",
  "account.resetPasswordFail": "Reset password Failed",
  "account.error.verify": "There's been an error in the verify process.",
  "account.expired.link": "This URL is either incorrect or has expired.",
  "account.expiredEmail.link": "The email verification link has expired.",
  "account.goToDashboard": "Go to Dashboard",
  "account.verifySuccess": "You have successfully verified the account.",
  "account.verifyFailed": "Verify Failed",
  "account.verifyEmail": "Verify Email",
  "account.verifyEmailFailed": "Email Verification Error",
  "head.page.epochDetails": "Epoch Details",
  "common.lastUpdatedAFewSecondAgo": "Last updated a few seconds ago",
  "common.lastUpdatedMinutesAgo": "Last updated {{value}} minutes ago",
  "drawer.txCount": "Tx Count",
  "common.viewDetails": "View details",
  "glossary.blockID": "Block ID",
  "glossary.output": "Output",
  "head.page.blocks": "Blocks",
  "glossary.blockId": "Block Id",
  "glossary.EpochSlot": "Epoch / Slot",
  "glossary.transaction": "Transaction",
  "glossary.comfirmations": "Confirmations",
  "glossary.comfirmation": "Confirmation",
  "glossary.transactionfees": "Transaction Fees",
  "glossary.blockproducer": "Block Producer",
  "glossary.totalOutputInAda": "Total output in ADA",
  "head.page.blockDetails": "Block Details",
  "glossary.outputInAda": "Output in ADA",
  "glossary.address": "Addresses",
  "glossary.input": "Input",
  "head.page.transactions": "Transactions",
  "glossary.txhash": "Tx hash",
  "glossary.inputAddress": "Input Address",
  "glossary.outpuAddress": "Output Address",
  "drawer.input": "Input ",
  "drawer.ouput": "Output",
  "drawer.comfirmations": "Confirmations",
  "drawer.transactionFees": "Transaction fees",
  "drawer.totalOutput": "Total output",
  "drawer.summary": "Summary",
  "tab.from": "From",
  "tab.to": "To",
  "tab.adaSent": "ADA Sent",
  "common.na": "N/A",
  "tab.tokensSent": "Tokens Sent",
  "tab.tokensReceived": "Tokens Received",
  "tab.multiple": "Multiple",
  "tab.viewTokens": "View Tokens",
  "tab.adaReceived": "ADA Received",
  "tab.utxos": "UTXOs",
  "tab.utxo": "UTXO",
  "head.page.nativeTokens": "Native tokens",
  "glossary.assetName": "Asset name",
  "glossary.scriptHash": "Script hash",
  "glossary.totalTransaction": "Total transaction",
  "glossary.numberOfHolders": "Number of holders",
  "glossary.totalVolumn": "Total volume",
  "glossary.totalSupply": "Total supply",
  "glossary.volume24h": "\tVolume 24H",
  "glossary.tokenType": "Token Type",
  "glossary.registry": "Token Registry",
  "glossary.tokenLastActivity": "Token Last Activity",
  "glossary.volumn": "Volume",
  "glossary.topHolders": "Top Holders",
  "glossary.share": "Share",
  "glossary.tokentMint": "Token mint",
  "glossary.noRecordsFound": "No records found",
  "common.highestVolumn": "Highest volumn",
  "common.lowestVolumn": "Lowest volumn",
  "glossary.amountedMinted": "Amount minted",
  "glossary.outputAddress": "Output address",
  "glossary.status": "Status",
  "glossary.contracts": "Contracts",
  "glossary.collateral": "Collateral",
  "glossary.from": "From",
  "glossary.to": "To",
  "glossary.inUnitsOftheNativeToken": "In units of the native token",
  "head.page.smartContracts": "Smart Contracts",
  "glossary.value": "Value",
  "common.result": "Result",
  "head.page.pool": "Pools",
  "head.page.drep": "Delegated Representatives",
  "head.page.dreps": "DReps",
  "head.page.dreps.des": "Delegated Representatives (DReps)",
  "glossary.Slot": "Slot",
  "glossary.delegators": "Delegators",
  "glossary.totalPools": "Total Pools",
  "glossary.totalDreps": "Total DReps",
  "glossary.endDateTime": "End in: {{d}} days {{h}} hours {{min}} minutes {{s}} seconds",
  "glossary.activePools": "Active Pools",
  "glossary.retiredPools": "Retired Pools",
  "glossary.activeDReps": "Active DReps",
  "glossary.retiredDReps": "Retired DReps",
  "glossary.inactiveDReps": "Inactive DReps",
  "dreps.id": "DRep ID",
  "dreps.anchorLink": "Anchor Link",
  "dreps.anchorHash": "Anchor Hash",
  "dreps.votingPower": "Voting Power",
  "dreps.participationRate": "Participation Rate",
  "dreps.registrationDate": "Registration Date",
  "dreps.lastUpdated": "Last Updated Date",
  "dreps.listOfDreps": "List of DReps",
  "common.searchPools": "Search Pools",
  "glossary.poolSize": "Pool size",
  "glossary.declaredPledge": "Declared Pledge ",
  "glossary.saturation": "Saturation",
  "glossary.numberOfDelegators": "Number of Delegators",
  "glossary.blocksInEpoch": "Blocks in Epoch",
  "glossary.fixedCost": "Fixed Cost",
  "head.page.constactDetails": "Contract Details",
  "common.verifyScript": "Verify Script",
  "common.inputNativeScript": "Input Native script",
  "common.verifiedScript": "Verified Script",
  "common.verifyScriptSuccessMessage": "Success! Contract has been verified successfully",
  "common.verifyScriptFailuraMessage": "Invalid script, please try again",
  "common.viewAddressDetail": "View Address Detail",
  "glossary.adaBalance": "ADA Balance",
  "glossary.adaValue": "ADA Value",
  "glossary.usdValue": "USD Value",
  "glossary.searchToken": "Search Token",
  "glossary.seeMore": "See more",
  "glossary.more": "+more",
  "glossary.tokenList": "Token list",
  "glossary.searchTokens": "Search tokens",
  "glossary.icon": "Icon",
  "glossary.name": "Name",
  "glossary.actualPledge": "Actual Pledge",
  "common.copy": "Copy",
  "common.copied": "Copied",
  "common.pleaseSignInToSaveYourBookmark": "Please sign in to save your bookmark",
  "common.bookmarkHasBeenAdded": "Bookmark has been added",
  "common.bookmarkHasBeenRemoved": "Bookmark has been removed",
  "common.ticker": "Ticker",
  "createdAt": "Created At",
  "rewardAccount": "Reward Account",
  "ownerAccount": "Owner Account",
  "poolSize": "Pool size",
  "stakeLimit": "Stake limit",
  "delegators": "Delegators",
  "saturation": "Saturation",
  "fixedCost": "Fixed Cost",
  "margin": "Margin",
  "votingPower": "Voting Power",
  "governanceParticipationRate": "Governance Participation Rate",
  "declaredPledge": "Declared Pledge",
  "epochBlocks": "Epoch Blocks",
  "lifetimeBlocks": "Lifetime Blocks",
  "analytics": "Analytics",
  "delegator": "Delegator",
  "stake": "Stake",
  "epoch": "Epoch",
  "highestStake": "Highest stake",
  "lowestStake": "Lowest stake",
  "highestNumberOfDelegators": "Highest number of delegators",
  "lowestNumberOfDelegators": "Lowest number of delegators",
  "stakingDelegators": "Staking Delegators",
  "certificatesHistory": "Pool Certificates History",
  "certificatesHistory.txHash": "Tx Hash",
  "certificatesHistory.block": "Block",
  "certificatesHistory.absoluteSlot": "Absolute Slot",
  "governanceVotes": "Governance Votes",
  "common.action": "Action",
  "blocks": "Blocks",
  "stakeAmount": "Stake Amount",
  "delegatorRewards": "Delegator Rewards",
  "fee": "Fee",
  "no": "No",
  "totalValue": "Total Value",
  "stakedTime": "Staked Time",
  "fees": "Fees",
  "vote.drep" : "DReps",
  "vote.committee": "Constitutional Committee",
  "vote.stakePool":"Stake Pool Operator",
  "tab.witnessAlgorithm":"WitnessAlgorithm",
  "tab.publicKey":"Public Key",
  "tab.signature":"Signature",
  "perPage": "Per page",
  "results": "Result / Results",
  "head.page.stakeAddressRegistration": "Stake Address Registration",
  "common.lastUpdatedAFew": "Last updated a few seconds ago | Last updated a few mimutes ago ",
  "glossary.createdAt": "Created At",
  "glossary.stakeAddress": "Stake Address\t",
  "drawer.status": "Status",
  "status.active": "ACTIVE",
  "status.deactivated": "DEACTIVATED",
  "status.retired": "RETIRED",
  "drawer.rewardAvailable": "Reward available",
  "drawer.withDrawn": "Reward withdrawn",
  "drawer.delegatedTo": "Delegated to",
  "drawer.totalStake": "Total Stake",
  "drawer.viewAllAddresses": "View all addresses",
  "drawer.delegationHIstory": "Delegation History",
  "drawer.stakeAddressHistory": "Stake Address History",
  "drawer.withDrawalHistory": "Withdrawal History",
  "drawer.InstaneousRewards": "Instantaneous Rewards",
  "drawer.transactions": "Transactions",
  "drawer.viewDetails": "View Details",
  "drawer.transactionsHistory": "Transaction history",
  "head.page.stakeAddressDeregistration": "Stake Address Deregistration",
  "common.lastUpdatedSecondsAgo": "Last updated {{sec}} seconds ago",
  "drawer.rewardWithdrawn": "Reward withdrawn",
  "drawer.notDelegatedToAnyPool": "Not delegated to any pool",
  "drawer.delegationHistory": "Delegation History",
  "drawer.withdrawalHistory": "Withdrawal History",
  "drawer.instaneousRewards": "Instantaneous Rewards",
  "drawer.viewDeatails": "View Details",
  "status.deActivated": "DEACTIVATED",
  "head.page.stakeDelegation": "Stake Delegation(s)",
  "glosary.rewardsPaid": "Rewards Paid",
  "head.page.stakeAddressDetail": "Stake Address Details",
  "glossary.totalStake": "Total Stake",
  "glossary.delegatedTo": "Delegated to",
  "glossary.rewardsAvailable": "Rewards available",
  "glossary.rewardsWithdrawn": "Rewards withdrawn",
  "glossary.addedOn": "Added on",
  "common.analytics": "Analytics",
  "common.reward": "Reward",
  "common.highestBalance": "Highest Balance",
  "common.lowestBalance": "Lowest Balance",
  "common.highestReward": "Highest Reward",
  "common.lowestReward": "Lowest Reward",
  "tab.DelegationHistory": "Delegation History",
  "tab.stakeAddressHistory": "Stake Address History",
  "tab.Registration": "Registration",
  "tab.Deregistration": "Deregistration",
  "tab.withdrawalHistory": "Withdrawal History",
  "tab.instantaneousRewards": "Instantaneous Rewards",
  "tab.transactions": "Transactions",
  "glossary.action": "Action",
  "glossary.registered": "REGISTERED",
  "glossary.deregistered": "DEREGISTERED",
  "glossary.amount": "Amount",
  "glossary.rewardsPaid": "Rewards Paid",
  "glossary.adaAmount": "ADA amount",
  "glossary.Token": "Token",
  "glossary.slc": "Staking Lifecycle",
  "slc.subTitle": "Search to explore the staking lifecycle events of a delegator or pool. What is staking on Cardano?",
  "slc.typeStakeOrPool": "Search stake address or pool ID",
  "slc.stakingDelegationLC": "Staking Delegation Lifecycle",
  "common.stakeAddress": "Stake Address",
  "common.switchTablularView": "Switch to tabular view",
  "common.switchTimelineView": "Switch to timeline view",
  "common.composeReport": "Compose Report",
  "common.pleaseSignIntoUseFeature": "Please sign in to use this feature",
  "message.report.limitGenerate": "Please note that you can only create {{time}} reports within 24 hours",
  "common.noRecordAtTime": "There is no record at this time",
  "common.adaTransfer": "ADA Transfer",
  "common.showXResults": "Show {{value}} results",
  "common.showXResult": "Show {{value}} result",
  "common.filter": "Filter",
  "filter.daterange.last2First": "Lastest - First",
  "filter.daterange.first2Last": "First - Lastest",
  "filter.daterange": "Date range",
  "filter.daterange.select": "Select date range",
  "common.ok": "OK",
  "common.cancel": "Cancel",
  "common.searchTx": "Search transaction",
  "common.reset": "Reset ",
  "common.registration": "Registration",
  "common.explain.adaHolder": "An ADA holder that wants to participate in the Proof of Stake consensus mechanism on the Cardano blockchain by delegating their ADA, must go through a process that involves registering a stake address. This is done by posting a so-called “stake address registration certificate” to the Cardano blockchain. This registration allows an ADA holder to delegate ADA and automatically sets up a rewards address where the Cardano blockchain accrues the rewards from such delegation (see Delegation and Rewards Collection).\n\nTechnically such a registration is required because delegation on the Cardano blockchain involves distinguishing between the transaction of ADA and the participation of the same ADA in the consensus mechanism. This distinction is achieved by modelling it in the address structure and distinguishing between payment address and stake address. ADA is always linked to a payment address but can optionally also be associated with a stake address. This allows the ADA holder to exercise staking or delegate it to a stake pool selected by the ADA holder.\n\nTo mitigate certain economic attacks, a refundable hold is imposed on the ADA holder upon registration, which is released when the stake address is deregistered. The hold covers the costs of tracking the stake address and maintaining the corresponding rewards account, and it incentivises deregistering unused stake addresses so that the corresponding Cardano blockchain resources can be released.",
  "common.registrationList": "Registration List",
  "common.adaHolder": "ADA Holder",
  "common.hold": "Hold",
  "common.fees": "Fees",
  "common.continue": "Continue",
  "common.cardanoBlc": "Cardano Blockchain",
  "slc.registrationCertificate": "Registration",
  "slc.nextDelegation": "Next: Delegation",
  "slc.delegation": "Delegation",
  "explain.adaHolder": "An ADA holder can delegate from their stake address to a stake pool by posting a so-called “delegation certificate” to the Cardano blockchain. If an ADA holder wishes to change their choice of stake pool, they are free to post a new delegation certificate at any time.\n\nTechnically a delegation certificate contains the stake address delegating its stake rights and the stake pool verification key hash to which the stake is delegated. If a source stake address is deregistered (see Deregistration), the associated delegation certificate is automatically revoked. Newer delegation certificates supersede older delegation certificates.",
  "slc.recentDelegations": "Recent Delegations",
  "slc.delegationCertificate": "Delegation certificate",
  "glossary.poolId": "Pool ID",
  "glossary.poolName": "Pool Name",
  "slc.previousRegistration": "Previous: Registration ",
  "slc.nextRewardsDistribution": "Next: Rewards Distribution",
  "slc.rewardsDisttribution": "Rewards Distribution",
  "slc.explain.rewardAccounts": "Reward accounts are used to distribute rewards for participating in the Proof of Stake consensus mechanism. For each stake address, there is an associated reward account. The lifecycle of the reward account follows that of the associated stake address. They cannot receive funds via transactions. Instead, their balance is only increased when rewards are distributed and decreased only when rewards are withdrawn. Thereby, the rewards from multiple epochs can be accumulated, and ADA holders can withdraw them manually. The balance of the reward account is included in the stake associated with the stake address, thus there is no incentive to frequently withdraw rewards.\n\nTechnically, the reward account maps a stake address to its reward balance. Since all the information relevant to calculating rewards is publicly available on the blockchain, it's unnecessary to explicitly write the balance of each reward account to the chain. Instead, nodes can store reward accounts and their current balance locally. The reward accounts are updated in bulk by the Cardano blockchain following the end of an epoch. They are also consulted and updated when validating and applying transactions that withdraw from reward accounts. The rewards for epoch “e” depend on the contents of that epoch, so it is not feasible to start calculating them during that epoch. Rewards for epoch e are therefore distributed by the Cardano blockchain at the beginning of e+2, which allows for reward calculation during epoch e+1. Reward accounts use account-type architecture instead of the Unspent-Transaction-Output (UTXO) architecture.",
  "slc.operatorReward": "Operator Reward (SPO)",
  "slc.operatorRewards": "Operator Rewards (SPO)",
  "slc.delegator.reward": "Delegator Reward",
  "common.amountADA": "Amount ADA",
  "common.Epoch": "Epoch",
  "common.Date": "Date",
  "glossary.rewardType": "Reward Type",
  "glossary.operatorReward": "Operator Reward",
  "glossary.receivedRewared": "Received Rewards",
  "glossary.rewardBalance": "Reward Balance",
  "slc.previousDelegation": "Previous: Delegation",
  "slc.nextReawardsWithdrawal": "Next: Rewards Withdrawal",
  "slc.rewardsWithdrawal": "Rewards Withdrawal",
  "slc.explain.rewardsAccount": "Rewards on a reward account can be withdrawn to a payment address at any time by using the reward account as an input to a transaction. This transaction follows the Unspent-Transaction-Output (UTXO) architecture, taking the current balance of the reward account as the input amount.",
  "slc.recentWithdrawals": "Recent Withdrawals",
  "common.paymentWallet": "Payment Wallet",
  "glossary.rewardAccount": "Reward Account",
  "glossary.netAmount": "Net amount",
  "common.withdrawn": "Withdrawn",
  "slc.previousRewardsDistribution": "Previous: Rewards Distribution",
  "slc.nextDeregistration": "Next: Deregistration",
  "common.deregistration": "Deregistration",
  "slc.explain.stakeAddress": "The stake address deregistration certificate contains the stake address that should be deregistered. Registering a stake address creates a corresponding reward account, which is deleted when the stake address is deregistered. The hold paid during registration is then released.",
  "common.deregistrationList": "Deregistration List",
  "common.deregistrationCert": "Deregistration certificate",
  "slc.previousRewardsWithdrawal": "Previous: Rewards Withdrawal",
  "slc.nextViewTabular": "Next: View In Tabular",
  "common.back": "Back",
  "slc.switchTimeline": "Switch to timeline view",
  "slc.rewardsWithdrawn": "Rewards Withdrawn",
  "slc.delegatingTo": "Delegating To",
  "glossary.txHash": "Transaction Hash",
  "common.createdAt": "Created At",
  "common.adaValue": " ADA Value",
  "common.holdOrFees": "Hold/Fees",
  "common.delegationTo": "Delegation To",
  "common.certificate": "Certificate ",
  "common.delegationHistory": "Delegation History",
  "common.rewardsPaid": "Rewards Paid",
  "common.withdrawalHistory": "Withdrawal History",
  "common.netAmount": "Net Amount",
  "common.withdrawnOrFees": "Withdrawn/Fees",
  "common.adaAmount": "ADA Amount",
  "common.slcFor": "Staking Lifecycle For ",
  "common.poolID": "Pool ID",
  "common.poolHash": "Pool Hash",
  "glossary.poolHold": "Pool hold",
  "slc.poolRegisCert": "Pool Registration certfiticate",
  "explain.stakePool": "Anyone who plans to operate a stake pool and thereby become a stake pool operator can declare this intent by posting a so-called “stake pool registration certificate to the blockchain. The certificate contains the parameters required to set up and operationalize the stake pool, such as operator and owner addresses, stake pool metadata, and reward-sharing parameters. Such parameters include but are not limited to cost, margin, and amount of stake pledged to the pool by the operator or owner (see below for more on this distinction). Click on the stake pool registration certificate for the full list of parameters.\n\nTechnically there is a difference between the stake pool operator and stake pool owner(s). The stake pool operator operates and monitors the pool by owning or renting a server to run the node and holding the key(s) to the pool. There is generally only one stake pool operator who holds the key to the stake pool itself that is used to sign blocks, retire a stake pool, update registration certificates and distribute rewards among the stake pool owners. The Stake Pool Owner pledges their staking authority to the pool, increasing its rewards and desirability. The ability for the owner to pledge stake mitigates against certain pool-level attacks (e.g. sybil). Often, the operator and owner will be the same party, but a stake pool can also have multiple owners. This allows multiple parties to coordinate to form a competitive stake pool, by combining the stake of the involved parties (owners), thereby increasing the total pledge.",
  "daterange.typeShowDate": "MM/DD/YYYY-MM/DD/YYYY",
  "slc.poolUpdates": "Pool Updates",
  "explain.stakePoolRegistration": "At most, there can be one active stake pool registration certificate for each stake pool. An older certificate will be overridden by a newer one.\n\nTo adjust the costs and margin of the pool, a stake pool operator can replace the registration certificate of the pool with a new one. This allows operators to respond to changes, e.g. in the pool's operational costs.",
  "common.recentUpdates": "Recent Updates\n",
  "slc.nextOperatorRewards": "Next: Operator Rewards",
  "common.showing": "Showing",
  "common.poolCertificate": "Pool Certificate",
  "common.txID": "Transaction ID",
  "common.vrfKey": "VRF Key",
  "common.owners": "Owners",
  "common.poolOwner": "Pool Owner",
  "glossary.margin": "Margin",
  "glossary.cost": "Cost",
  "glossary.pledge": "Pledge",
  "common.previous": "Previous",
  "common.certificateUpdates": "Certificate updates",
  "common.old": "Old",
  "common.new": "New",
  "common.operatorRewards": "Operator Rewards ",
  "explain.epoch": "At the end of each epoch, the Cardano blockchain calculates rewards for stake pool operators and delegators. The rewards for each registered stake address are added to the associated reward account. Since all the information relevant to calculating rewards is publicly available on the blockchain, it's unnecessary to explicitly write the balance of each reward account to the chain. Instead, nodes can store reward accounts and their current balance locally.\n\nDuring reward distribution, no rewards are paid to the reward accounts of owner stake addresses. Instead, the stake delegated by all owner stake addresses is counted as the stake contributed by the pool owner(s), and their reward is paid to the reward account of the stake pool.",
  "common.spo": "SPO",
  "common.poolId": "Pool ID",
  "common.poolhash": "Pool hash",
  "common.poolHomepage": "Homepage",
  "common.poolDescription": "Description",
  "common.poolName": "Pool Name",
  "common.overall": "Overall Vote",
  "glossary.epoch": "Epoch",
  "glossary.upcomingEpoch": "Upcoming Epoch",
  "common.rewardAccount": "Reward Account",
  "slc.previousPoolUpdates": "Previous: Pool Updates",
  "slc.deregistration": "Deregistration",
  "slc.recentDeregistration": "Recent Deregistration",
  "glossary.fees": "FEES",
  "glossary.deregistrationCertificate": "Deregistration Certificate",
  "glossary.retirementsEpoch": "Retirement in Epoch",
  "glossary.stakePool": "If a stake pool wishes to cease operation, it can announce this intention by posting a stake pool retirement certificate.\n\nThe Stake Pool Retirement Certificate contains the public key hash of the pool and the epoch number, starting from which the stake pool will cease operation.\n\nAfter the retirement epoch, any stake delegated to this stake pool will be disregarded and will not participate in the consensus mechanism.",
  "glossary.operatorRewards": "Previous: Operator Rewards",
  "slc.nextViewInTabular": "Next: View in Tabular",
  "slc.switchTimelineView": "Switch to timeline view",
  "common.status": "Status",
  "common.retired": "Retired",
  "common.incactive": "Inactive",
  "common.active": "Active",
  "slc.rewardsAvailable": "Rewards Available",
  "common.ownerAccount": "Owner Account",
  "common.txhash": "Transaction hash",
  "common.poolRegisCert": "Pool registration certificate",
  "common.xResults": "{{value}} results",
  "common.poolUpdate": "Pool Update",
  "common.poolCert": "Pool certificate",
  "common.operatorRewardADA": "Operator Reward ADA",
  "common.savedReports": "Saved reports",
  "common.yourSavedReports": "Your saved reports",
  "common.stakeAddressReports": "Stake Address Reports",
  "common.poolReports": "Pool Reports",
  "common.reportName": "Report Name",
  "common.dateRange": "Date Range",
  "common.adaTransfers": "ADA Transfers\t",
  "common.exportingReport": "Exporting Report\t",
  "common.expired": "Expired",
  "common.EXPIRED": "EXPIRED",
  "common.pending": "Pending",
  "glossary.epochRnage": "Epoch Range",
  "common.walletActivity": "Wallet activity",
  "common.reawardActivity": "Reward activity",
  "common.totalBalnceReward": "Total balance including reward",
  "common.amouintADA": "Amount ADA",
  "status.success": "Success",
  "status.failed": "Fail",
  "common.rewardWithdrawn": "Reward withdrawn",
  "common.rewardReceived": "Reward received",
  "report.composer": "Report Composer",
  "report.name": "Report name",
  "report.placeholder": "Enter report name",
  "report.selectEpochRange": "Select a epoch range",
  "common.poolSize": "Pool size",
  "common.yes": "Yes",
  "common.no": "No",
  "common.abstain": "Abstain",
  "common.poolReportByEvent": "Pool Report by event",
  "common.select as required": "Select as required",
  "common.all": "All",
  "common.reard": "Reward",
  "common.next": "Next",
  "explain.reportCreation": "Before proceeding with your report creation, we just want to double-check and confirm that you’ve filled out all the details correctly?",
  "common.epochRange": "Epoch range",
  "common.doubleCheck": "I'd like to double-check",
  "common.generateReport": "Generate report",
  "common.withdrawFunds": "Withdraw Funds",
  "common.stakeAddressDetails": "Stake address details",
  "common.stakingLCEvent": "Staking lifecycle events",
  "common.rewards": "Rewards",
  "common.policyDetails": "Policy Details",
  "common.scriptHash": "Script Hash",
  "common.policyScript": "Policy Script",
  "common.totalToken": "Total Token",
  "common.token": "Token",
  "common.tokenName": "Token Name",
  "common.tokenID": "Token ID",
  "common.totalSupply": "Total Supply",
  "common.totalTxs": "Total Transactions",
  "common.policyAssetHolders": "Policy Asset Holders",
  "common.address": "Address",
  "common.balance": "Balance",
  "common.results": "Results",
  "common.protocolParameters": "Protocol Parameters",
  "common.updatableParameters": "Updatable Parameters",
  "common.viewUpdateHistory": "View Update History",
  "common.parameterName": "Parameter Name",
  "common.value": "Value",
  "common.lastUpdatedInEpoch": "Last updated in epoch",
  "common.timestamp": "Timestamp",
  "glossary.globalconstants": "Global Constants",
  "explain.shelleyEra": "Please be aware that we just display the protocol parameters from Shelley Era onwards (from Epoch {{epoch}}). For further information, please visit",
  "common.ppUpdateHistory": "Protocol Parameter Updates",
  "glossary.showingNumberEpochs": "Showing {{total}} epochs",
  "glossary.showingNumberEpoch": "Showing {{total}} epoch",
  "filter.latestFirst": "Latest - First",
  "filter.firstLatest": "First - Latest",
  "common.parameterChanges": "Parameter changes",
  "common.allParameters": "All parameters",
  "common.applyFilters": "Apply Filters",
  "common.selectDateRange": "Select date range",
  "common.viewDetail": "View Detail",
  "common.close": "Close",
  "common.totalBlocks": "Total Blocks",
  "common.epoch.finished": "Finished",
  "common.epoch.inProgress": "In Progress",
  "common.epoch.rewarding": "Rewarding",
  "common.epoch.cyncing": "Syncing",
  "SUCCESS": "SUCCESS",
  "FAILED": "FAILED",
  "PENDING": "PENDING",
  "MEDIUM": "MEDIUM",
  "LOW": "LOW",
  "HIGH": "HIGH",
  "tab.notes": "Notes",
  "tab.withdrawal": "Withdrawal",
  "tab.delegations": "Delegations",
  "tab.minting": "Minting",
  "tab.poolCertificates": "Pool certificates",
  "tab.signersInformation": "Transaction Signatories",
  "tab.stakeCertificates": "Stake Certificates",
  "tab.protocolUpdate": "Protocol Update",
  "glossary.addressList": "Address list",
  "glossary.transactionDetailTitle": "Transaction Details",
  "glossary.redeemer": "Redeemer",
  "common.tag": "Tag",
  "common.data": "Data",
  "common.mem": "Mem",
  "common.steps": "Steps",
  "glossary.contract": "Contract",
  "glossary.datumHash": "Datum Hash",
  "glossary.datum": "Datum",
  "glassary.contractBytecode": "Contract Bytecode",
  "glassary.totalCollateralSpent": "Total Collateral Spent",
  "glassary.walletAddresses": "Wallet Addresses",
  "script.notfound": "Script not found",
  "title.poolRegistrations": "Pool Registrations",
  "title.poolDeregistrations": "Pool Deregistrations",
  "common.poolOperator": "Pool Operator",
  "glossary.stakeAddressRegistrations": "Stake Address Registrations",
  "glossary.stakeAddressDeregistrations": "Stake Address Deregistrations",
  "common.previousValue": "Previous Value",
  "common.updatedValue": "Updated Value",
  "common.CostModel": "CostModel",
  "common.metadataHash": "Metadata Hash",
  "common.metadatumLabel": "Metadatum Label",
  "common.key": "Key",
  "glossary.highestVolume": "Highest Volume",
  "glossary.lowestVolume": "Lowest Volume",
  "glossary.blockEpochSlot": "Block/ Epoch/ Slot",
  "glossary.totalContracts": "Total Contracts",
  "glossary.controlledTotalStake": "Controlled Total Stake",
  "common.noRecords": "No records",
  "common.script": "Script",
  "common.scriptType": "Script Type",
  "common.nativeScript": "Native Script",
  "drawer.scriptNotVerified": "Script has not been verified",
  "adrress.byAddressADABalance": "By Address ADA Balance",
  "address.byAmountStaked": "By Amount Staked",
  "address.title.addressDetail": "Address Details",
  "address.viewContractDetail": "View Smart Contract Details",
  "address.viewNativeScriptDetail": "View Native Script Details",
  "common.day": "day",
  "common.days": "days",
  "common.endIn": "End in",
  "common.hour": "hour",
  "common.hours": "hours",
  "common.minute": "minute",
  "common.minutes": "minutes",
  "common.second": "second",
  "common.seconds": "seconds",
  "glossary.rewardAccountList": "Reward account list",
  "glossary.ownerAddressList": "Owner address list",
  "glossary.totalTokenList": "Total Token List",
  "common.Previous": "Previous",
  "common.totalEpoch": "Total Epochs",
  "common.holdBoxLimitWarning": "Pool hold paid during registration is refunded after the retirement epoch to the reward account of the pool operator",
  "common.viewTabular": "View in tabular",
  "desc.RegistrationSPOProcessDescription.1st": " Anyone who plans to operate a stake pool and thereby become a stake pool operator can declare this intent by posting a so-called “stake pool registration certificate to the blockchain. The certificate contains the parameters required to set up and operationalize the stake pool, such as operator and owner addresses, stake pool metadata, and reward-sharing parameters. Such parameters include but are not limited to cost, margin, and amount of stake pledged to the pool by the operator or owner (see below for more on this distinction). Click on the stake pool registration certificate for the full list of parameters.",
  "desc.RegistrationSPOProcessDescription.2st": " Technically there is a difference between the stake pool operator and stake pool owner(s). The stake pool operator operates and monitors the pool by owning or renting a server to run the node and holding the key(s) to the pool. There is generally only one stake pool operator who holds the key to the stake pool itself that is used to sign blocks, retire a stake pool, update registration certificates and distribute rewards among the stake pool owners. The Stake Pool Owner pledges their staking authority to the pool, increasing its rewards and desirability. The ability for the owner to pledge stake mitigates against certain pool-level attacks (e.g. sybil). Often, the operator and owner will be the same party, but a stake pool can also have multiple owners. This allows multiple parties to coordinate to form a competitive stake pool, by combining the stake of the involved parties (owners), thereby increasing the total pledge.",
  "desc.SPOInvolvementInDelegationDescription.1st": "At most, there can be one active stake pool registration certificate for each stake pool. An older certificate will be overridden by a newer one.",
  "desc.SPOInvolvementInDelegationDescription.2st": "To adjust the costs and margin of the pool, a stake pool operator can replace the registration certificate of the pool with a new one. This allows operators to respond to changes, e.g. in the pool's operational costs.",
  "desc.OperatorRewards.1st": " At the end of each epoch, the Cardano blockchain calculates rewards for stake pool operators and delegators. The rewards for each registered stake address are added to the associated reward account. Since all the information relevant to calculating rewards is publicly available on the blockchain, it's unnecessary to explicitly write the balance of each reward account to the chain. Instead, nodes can store reward accounts and their current balance locally.",
  "desc.OperatorRewards.2st": "During reward distribution, no rewards are paid to the reward accounts of owner stake addresses. Instead, the stake delegated by all owner stake addresses is counted as the stake contributed by the pool owner(s), and their reward is paid to the reward account of the stake pool.",
  "desc.DeregistrationSPOProcessDescription.1st": "If a stake pool wishes to cease operation, it can announce this intention by posting a stake pool retirement certificate.",
  "desc.DeregistrationSPOProcessDescription.2st": "The Stake Pool Retirement Certificate contains the public key hash of the pool and the epoch number, starting from which the stake pool will cease operation.",
  "desc.DeregistrationSPOProcessDescription.3st": "After the retirement epoch, any stake delegated to this stake pool will be disregarded and will not participate in the consensus mechanism.",
  "desc.DeregistrationSPOProcessDescription.4th": "If a pool update is posted before the deregistration epoch, it will override the deregistration.",
  "common.rewardsActivity": "Rewards Activity",
  "glossary.txType": "Transaction Type",
  "sklc.registrationCertificate": "Registration certificate",
  "common.transactionOfADA": "transaction of ADA",
  "common.optionally": "optionally",
  "desc.RegistrationDelegatorProcessDescription.1st": " An ADA holder that wants to participate in the Proof of Stake consensus mechanism on the Cardano blockchain by delegating their ADA, must go through a process that involves registering a",
  "desc.RegistrationDelegatorProcessDescription.2st": "This is done by posting a so-called “stake address registration certificate” to the Cardano blockchain. This registration allows an ADA holder to delegate ADA and automatically sets up a rewards address where the Cardano blockchain accrues the rewards from such delegation (see Delegation and Rewards Collection).",
  "desc.RegistrationDelegatorProcessDescription.3st": "Technically such a registration is required because delegation on the Cardano blockchain involves distinguishing between the",
  "desc.RegistrationDelegatorProcessDescription.4st": "the participation of the same ADA",
  "desc.RegistrationDelegatorProcessDescription.5st": "in the consensus mechanism. This distinction is achieved by modelling it in the address structure and distinguishing between payment address and stake address. ADA is always linked to a payment address but can",
  "desc.RegistrationDelegatorProcessDescription.6st": "also be associated with a stake address. This allows the ADA holder to exercise staking or delegate it to a stake pool selected by the ADA holder.",
  "desc.RegistrationDelegatorProcessDescription.7st": "To mitigate certain economic attacks, a refundable hold is imposed on the ADA holder upon registration, which is released when the stake address is deregistered. The hold covers the costs of tracking the stake address and maintaining the corresponding rewards account, and it incentivises deregistering unused stake addresses so that the corresponding Cardano blockchain resources can be released.",
  "common.walletBalance": "Wallet balance",
  "common.total": "Total",
  "common.timzoneFormat": "Timezone Format",
  "common.timzoneNotice": "Update your timezone preferences",
  "common.timzoneNoticeDisnable": "Timezone already corresponds to UTC",
  "common.timzoneFormat.des": "Choose between your local timezone and UTC. If you want to save these preferences you will need to be signed in.",
  "common.poolRegistration": "Pool Registration",
  "common.searchPoolDesc": "Search to explore the staking lifecycle events of a delegator or pool.",
  "common.whatCardano": "What is staking on Cardano?",
  "common.selectRange": "Select a date range",
  "common.reportLimitCharacters": "Report name can not exceed 125 characters",
  "slc.reportDoubleCheck": "Before proceeding with your report creation, we just want to double-check and confirm that you’ve filled out all the details correctly?",
  "slc.btn.doubleCheck": "I’d like to double-check",
  "common.feesPaid": "Fees paid",
  "report.searchLabel": "Search report name",
  "report.events": "Events",
  "report.stakeAddressSummary": "Stake address summary",
  "glossary.mostRelavant": "most relevant results",
  "dropdown.browseDelegator": "Browse an example delegator",
  "dropdown.stakePool": "Browse an example stake pool",
  "common.welcomeStakingLifecycle": "Welcome to Staking Lifecycle",
  "CC_1": "Unknown error",
  "CC_2": "The access token is invalid",
  "CC_3": "The access token is expired",
  "CC_4": "The refresh token is expired",
  "CC_5": "The signature is invalid",
  "CC_6": "User is not exist",
  "CC_7": "The nonce is expired. Please take new nonce",
  "CC_8": "The role is not found",
  "CC_9": "The refresh token is not exist",
  "CC_10": "The signature access token is invalid",
  "CC_11": "The access token is unsupported",
  "CC_12": "The access token is not empty",
  "CC_13": "The parameter is not null",
  "CC_14": "Bookmarks do not exceed 2000 records",
  "CC_15": "Private note do not exceed 2000 records",
  "CC_16": "Bookmark is already exists",
  "CC_17": "Private note is already exists",
  "CC_18": "Wallet is not linked to account yet",
  "CC_19": "Username is already exist",
  "CC_20": "Wallet is already exist",
  "CC_21": "The verify code is invalid",
  "CC_22": "User is not ready to active",
  "CC_23": "Email already exist",
  "CC_24": "Username or password is invalid",
  "INVALID_PARAM": "Invalid param",
  "INTERNAL_ERROR": "Something went wrong",
  "404-EPOCH_NOT_FOUND": "Epoch not found",
  "404-BLOCK_NOT_FOUND": "Block not found",
  "404-TRANSACTION_NOT_FOUND": "Transaction not found",
  "404-ADDRESS_NOT_FOUND": "Wallet address not found",
  "404-STAKE_ADDRESS_NOT_FOUND": "Stake address not found",
  "TOKEN_NOT_FOUND": "Token not found",
  "404-POLICY_NOT_FOUND": "Policy not found",
  "404-STAKE_REGISTRATION_NOT_FOUND": "Stake registration not found",
  "404-STAKE_DEREGISTRATION_NOT_FOUND": "Stake de-registration not found",
  "404-STAKE_DELEGATION_NOT_FOUND": "Stake delegation not found",
  "404-STAKE_REPORT_HISTORY_NOT_FOUND": "Stake report history not found",
  "404-POOL_REPORT_HISTORY_NOT_FOUND": "Pool report history not found",
  "404-REPORT_IS_IN_PROGRESS": "Report is in progress",
  "404-POOL_NOT_FOUND": "PoolId not found",
  "404-EXPORT_TYPE_NOT_SUPPORTED": "Export type not supported",
  "404-PROTOCOL_FIELD_NOT_FOUND": "This field is not support",
  "404-SCRIPT_NOT_FOUND": "Script not found",
  "400-TIME_RANGE_ILLEGAL": "Time range is illegal",
  "400-REPORT_LIMIT_REACHED": "Report limit reached",
  "desc.InUnits4Native": "In units of the native token",
  "message.error.title": "Error",
  "message.success.title": "Success",
  "message.warning.title": "Warning",
  "message.information.title": "Information",
  "common.account": "Account",
  "common.signOut": "Sign Out",
  "common.connect2wallet.title": "Connect to a wallet",
  "common.notInstalled": "Not Installed",
  "account.enterUrUsername": "Enter your Username",
  "account.createUniqueAccount": "Please enter your Username to create a new unique one",
  "account.username": "Username",
  "message.error.accountInValid": "Username has to be from 5 to 30 characters in length, only alphanumeric characters allowed",
  "common.confirm": "Confirm",
  "common.noStakeMessage": "No stake key associated",
  "common.withDrawFunds": "Withdraw funds",
  "common.addressList": "Addresses list",
  "common.hexFormat": "Hex Format",
  "common.sent": "Sent",
  "common.received": "Received",
  "explain.minFeeA": "Additional transaction fee per byte of data (in lovelace).",
  "explain.minFeeB": "Base transaction fee (in lovelace).",
  "explain.maxBlockSize": "Maximum size of a block body. Limits blockchain storage size",
  "explain.maxTxSize": "Maximum size of a transaction. Several transactions may be included in a block. Must be strictly less than the max. block body size.",
  "explain.maxBhSize": "Maximum size of the block header. Should be significantly less than the maximum block size.",
  "explain.keyDeposit": "Deposit charged for stake keys (in Lovelace). Ensures that unused keys are returned",
  "explain.poolDeposit": "Pool deposit (in lovelace).",
  "explain.maxEpoch": "Maximum number of epochs within which a pool can be announced to retire",
  "explain.optimalPoolCount": "Target number of pools (\"k\"). Impacts saturation threshold",
  "explain.influence": "Influence Factor. Governs how much impact the pledge has on rewards.",
  "explain.monetaryExpandRate": "Monetary expansion rate per epoch. Governs the rewards that are returned from reserves to the ecosystem (treasury, stake pools and delegators).",
  "explain.treasuryGrowthRate": "Treasury rate (0.2 = 20%). Proportion of total rewards allocated to treasury each epoch before remaining rewards are distributed to pools.",
  "explain.decentralisation": "Level of decentralisation. Starts at 1. Block production is fully decentralised when this reaches 0.",
  "explain.entropy": "Should additional entropy be included in the initial phases. This provides additional certainty that the blockchain has not been compromised by the seed key holders. Redundant once the system is sufficiently decentralised.",
  "explain.protocolMajor": "Protocol version. Major version 1 = Byron",
  "explain.protocolMinor": "Protocol version. Minor versions indicate software updates (will generally be 0).",
  "explain.minUtxoValue": "Minimum allowed value in a UTxO. Security-related parameter used to prevent the creation of many small UTxOs that could use excessive resource to process.",
  "explain.minPoolCost": "Minimum Pool Cost per epoch (in lovelace). Enables pledge effect.",
  "explain.costModel": "Detailed cost models for each Plutus version.",
  "explain.priceMem": "Fee per Plutus execution per memory unit",
  "explain.priceStep": "Fee per Plutus execution step",
  "explain.maxTxExMem": "Maximum number of memory units in a single transaction.",
  "explain.maxTxExSteps": "Maximum number of steps in a single transaction.",
  "explain.maxBlockExMem": "Maximum number of memory units in a single block.",
  "explain.maxBlockExSteps": "Maximum number of steps in a single block.",
  "explain.maxValSize": "The limit on the serialized size of the Value in each output.",
  "explain.collateralPercent": "Percentage of fee that is used as collateral for a failed transaction.",
  "explain.maxCollateralInputs": "Maximum number of collateral inputs in a transaction.",
  "explain.coinsPerUTxOByte": "Starting in the Babbage era, update proposals that want to modify coinsPerUTxOByte must bear in mind that the measurement is in bytes, not words. In the Alonzo era, deposit charged per word of UTxO storage.",
  "explain.activeSlotsCoeff": "The fraction of the total number of slots that will",
  "explain.genDelegs": "Details of the public keys that have been selected by each of the genesis keys to act as a delegate for signing protocol updates etc.",
  "explain.updateQuorum": "How many of the genesis delegate keys must endorse an update proposal.",
  "explain.networkId": "Is this a testnet or mainnet",
  "explain.initialFunds": "initial distribution of funds to addresses.",
  "explain.maxLovelaceSupply": "The limit on the maximum number of lovelace that can be in circulation.",
  "explain.networkMagic": "A magic number used to distinguish different networks.",
  "explain.epochLength": "The number of slots in an epoch.",
  "explain.timestamp": "When did the system originally start operation.",
  "explain.slotsPerKESPeriod": "After how many slots will a pool's operational key pair evolve (Key Evolving Signatures).",
  "explain.slotLength": "The length of each slot (in seconds).",
  "explain.maxKESEvolutions": "What is the maximum number of times a KES key pair can evolve before a new KES key pair must be generated from the master keys.",
  "explain.securityParam": "After how many blocks is the blockchain considered to be final",
  "explain.operatorRewardSPO": "List of pool operator rewards received in this reward account, displayed separately from delegator rewards. Relevant only if this reward account has been registered as the reward account of a stake pool and received operator rewards.",
  "explain.smartContract": "What are smart contracts?",
  "explain.compiledCode": "What is compiled code?",
  "explain.datum": "What is the datum?",
  "explain.datum.desc": "On execution, each smart contract uses its datum, redeemer, and transaction elements to determine whether the conditions needed to spend the unspent transaction output (UTxO) are met. The smart contract can be thought of as a mathematical function returning a yes or no. It is a function with parameters and arguments. ",
  "explain.datum.desc2": "The function parameters represent the datum, and the function argument represents the redeemer. The datum is provided in the output when it is created, by the party who locks the funds. The redeemer, on the other hand, is supplied in the transaction that is spending the funds.",
  "explain.compiledCode.desc": "The Cardano ledger embeds a virtual machine capable of specific operations to execute smart contracts in isolation. Like any virtual machine, it provides built-in instructions and operations that programs can rely on. It knows basic arithmetic operations and how to calculate function results. The virtual machine's machine code is called 'Untyped Plutus Core', or UPLC for short.",
  "explain.compiledCode.desc2": "The compiled code can be viewed in UPLC or its binary encoded format. UPLC is the format whereby code gets executed on-chain, and it is encoded into binary format when submitted on-chain.",
  "contract.purpose": "Purpose",
  "contract.data": "Data",
  "contract.mem": "Mem",
  "contract.steps": "Steps",
  "contract.datumHash": "Datum Hash",
  "contract.datum": "Datum",
  "contract.compiledCode": "Compiled Code",
  "contract.compiledCode.viewInBinary": "View in binary",
  "contract.title": "Contract",
  "contract.burn": "Burn",
  "contract.assets": "Assets",
  "contract.assetName": "Asset Name",
  "contract.governance": "Governance Action",
  "contract.expireDate": "Expire Date",
  "contract.expiryDate": "Expiry Date",
  "contract.proposalPolicy": "Proposal Policy",
  "contract.treasury": "Treasury Withdrawal",
  "common.quantity": "Quantity",
  "contract.redeemer": "Redeemer",
  "contract.voterType": "Voter Type",
  "contract.viewGovernanceVotes": "View Governance Votes",
  "contract.governanceActionMetadata": "Governance Action Metadata:",
  "explain.redeemer": "What is the redeemer?",
  "explain.output": "What is the output?",
  "explain.redeemer.desc": "On execution, each smart contract uses its datum, redeemer, and transaction elements to determine whether the conditions needed to spend the unspent transaction output (UTxO) are met. The smart contract can be thought of as a mathematical function returning a yes or no. It is a function with parameters and arguments.",
  "explain.redeemer.desc2": "The function parameters represent the datum, and the function argument represents the redeemer. The datum is provided in the output when it is created, by the party who locks the funds. The redeemer, on the other hand, is supplied in the transaction that is spending the funds.",
  "explain.smartContract.desc": "A smart contract Is a computer program or a transaction protocol intended to automatically execute, control, or document relevant events and actions according to the terms of a contract or an agreement.",
  "explain.smartContract.desc2": "Cardano smart contracts are deterministic and executed when someone tries to perform specific actions, such as spend from an unspent transaction output (UTxO) that has a smart contract attached. It can be thought of as a mathematical function returning a yes or no. The contract's on-chain code checks if the conditions set in the contract are met. In other words, an on-chain smart contract script in Cardano is a validator that verifies a transaction and either authorises or rejects it.",
  "contract.continueReading": "Continue Reading",
  "contract.address": "Contract Address",
  "contract.viewContract": "View Contract",
  "explain.spend.desc": "A script that controls how to spend outputs.",
  "explain.mint.desc": "A script that controls how to mint or burn assets.",
  "explain.cert.desc": "A script that controls how to publish delegation certificates.",
  "explain.reward.desc": "A script that controls how to withdraw consensus rewards.",
  "explain.voting.desc": "A script that controls how to withdraw consensus rewards.",
  "explain.proposing.desc": "A script that controls how to withdraw consensus rewards.",
  "contract.certificateType": "Certificate Type",
  "glassary.showRetiredPools": "Show Retired Pools",
  "trx.desSignatories": "This transaction was signed by the following signer keys",
  "trx.tooltipSignatories": "Genesis delegate key",
  "trx.signerPublicKeyHas": "Signer Public Key",
  "contract.referenceInput": "Reference Inputs",
  "trx.referenceInput": "Reference Inputs Available",
  "explain.referenceInput": "What are reference inputs?",
  "explain.referenceInput.desc": "A reference input is a transaction input, which is linked to a particular transaction output as normal, except that it references the output rather than spending it.This facilitates access to information (datum) stored on the blockchain without the need for spending and re-creating unspent transaction outputs (UTXOs).",
  "explain.referenceInput.link": "Further information is available in the",
  "common.TotalDelegatorRewardsReceived": "Total delegator rewards received",
  "common.TotalOperatorRewardsReceived": "Total operator rewards received",
  "slc.totalRewardsReceived": "Total rewards received",
  "slc.amountReceived": "Amount received",
  "common.proceedToExternalLink": "Proceed to External Link",
  "common.smartContractDetails": "Smart Contract Details",
  "common.associatedAddresses": "Associated Addresses",
  "common.viewAddresses": "View Addresses",
  "common.nativeScriptDetails": "Native Script Details",
  "common.unknownServerError": "Unknown server error",
  "common.type": "Type",
  "common.allowedBy": "Allowed by",
  "common.before": "before",
  "common.after": "after",
  "common.cond": "Conditions",
  "common.verifyScriptDesc": "This script has not been verified. To verify, please click the button below.",
  "contract.referenceInput.canOnlyBeUsedByThisContract": "Can only be used by this contract",
  "contract.referenceInput.canBeUsedByAllContract": "Can be used by all contracts",
  "ScriptHash": "Script Hash",
  "NumberOfTokens": "Number of Tokens",
  "NumberOfAssetHolders": "Number of Asset Holders",
  "NativeScripts": "Native Scripts",
  "AssociatedAddresses": "Associated Addresses",
  "SmartContractDetails": "Smart Contract Details",
  "Version": "Version",
  "moreThan10Years": "> 10 years",
  "ViewAddresses": "View Addresses",
  "ViewStakingLifecycle": "View the Staking Lifecycle",
  "token.timelock": "Time locked",
  "token.oneTimeMint": "One time mint",
  "sanchonet.toltipTotalStake": "Does not include reward balance",
  "notice": "Important: Scope & Limitations",
  "notice.title": "Scope & Limitations",
  "notice.value.a": "Functionality coverage: Existing Explorer user interface is being used to display Sanchonet data. Any new functionality specific to Sanchonet (CIP-1694 governance features) will be introduced gradually and will be highlighted accordingly in Github release notes",
  "notice.value.b": "Limitations:",
  "notice.value.b1": "Rewards and stake data: Not available at present. This impacts stake address balances where reward balance is nonzero, as well as pool stake information. Data points that are not available are displayed as “N/A” until they are integrated. ",
  "notice.value.b2": "Limited support and maintenance: Any issues including network maintenance (e.g. network restarts) will be dealt with on a best effort basis",
  "token.CIP25Compliance": "CIP 25 Compliance",
  "cip25.property": "Property",
  "cip25.format": "Format",
  "cip.compliance": "Compliance",
  "protocol.trxModalSubTitle": "Confirmed by transactions",
  "cip.result": "Result",
  "cip.expectedFormat": "Expected Format",
  "cip.valueFormat": "Value Format",
  "cip25.compliance": "CIP Compliance",
  "token.CIP-25": "CIP-25",
  "token.CIP-20": "CIP-20",
  "token.CIP-83": "CIP-83",
  "token.requiredProperties": "Required Properties",
  "token.optionalProperties": "Optional Properties",
  "token.otherProperties": "Other Properties",
  "token.cip25otherProperties.desc": "Any metadata that doesn't fall into the \"required\" or \"optional\" categories according to the CIP-25 specification is not verified for compliance and therefore won't be displayed in this view.",
  "common.passed": "Passed",
  "common.needsReview": "Needs Review",
  "common.checkNotRequired": "Check Not Required",
  "cip25.viewDocs": "View CIP 25 document",
  "cip25.modal.title": "Cardano Improvement Proposal 25 (CIP-25)",
  "cip25.modal.subtitle": "Media Token Metadata Standard for Native Tokens",
  "common.severUnknownErrorMsg": "Something went wrong on our side, please try again later or report an issue",
  "token.cip60Title": "Cardano Improvement Proposal 60 (CIP-60)",
  "cip60.modal.subtitle": "Media Token Metadata Standard for Music Tokens",
  "token.cip60": "CIP-60",
  "cip60.viewDocs": "View CIP 60 document",
  "cip60.notCompliance": "This token is not compliant with CIP 60. See the details",
  "token.cip20Title": "Cardano Improvement Proposal 20 (CIP-20)",
  "cip20.modal.subtitle": "Transaction Message/Comment Metadata Standard",
  "cip20.viewDocs": "View CIP 20 document",
  "token.cip83Title": "Cardano Improvement Proposal 83 (CIP-83)",
  "cip83.modal.desc": "Encrypted Transaction Message/Comment Metadata Standard",
  "cip83.viewDocs": "View CIP 83 document",
  "token.cip60otherProperties.desc": "Any metadata that doesn't fall into the \"required\" or \"optional\" categories according to the CIP-60 specification is not verified for compliance and therefore won't be displayed in this view.",
  "token.cip20otherProperties.desc": "Any metadata that doesn't fall into the \"required\" or \"optional\" categories according to the CIP-20 specification is not verified for compliance and therefore won't be displayed in this view.",
  "token.cip83otherProperties.desc": "Any metadata that doesn't fall into the \"required\" or \"optional\" categories according to the CIP-83 specification is not verified for compliance and therefore won't be displayed in this view.",
  "cip.versionCheck": "The metadata version should be 1 or 2 in order to comply with CIP-60",
  "outputs.label": "Outputs",
  "output.label": "Output",
  "cip.warningVersion1": "This compliance check is based on the deprecated music token version v1",
  "address.title.ADAHanlde": "Address (ADA Handle)",
  "smartContract.totalTrx": "Number of Transactions",
  "smartContract.trxPurpose": "Transaction Purpose",
  "smartContract.any": "Any",
  "smartContract.selectAll": "Select All",
  "smartContract.plutusv1": "Plutus V1",
  "smartContract.plutusv2": "Plutus V2",
  "smartContract.plutusv3": "Plutus V3",
  "smartContract.spend": "Spend",
  "smartContract.mint": "Mint(Burn)",
  "smartContract.reward": "Reward",
  "smartContract.cert": "Cert",
  "smartContract.voting": "Voting",
  "smartContract.proposing": "Proposing",
  "smartContract.noTransactionPurpose": "No Transaction Purpose",
  "nativeScript.timeLock": "Time-Lock",
  "nativeScript.timeLocked": "Time-Locked",
  "nativeScript.multiSig": "Multi-Sig",
  "nativeScript.policy": "Minting / Burning Policy",
  "nativeScript.script": "Script",
  "nativeScript.token": "Token",
  "nativeScript.signModal": "Signer Public Keys",
  "nativeScript.viewSigner": "View Signer Public Keys",
  "nativeScript.mint.type": "Type",
  "nativeScript.mint.status": "Current Status",
  "nativeScript.mint.timeLockInfo": "Time-Lock Information",
  "nativeScript.mint.signerKeys": "Signer Public Keys",
  "nativeScript.tokens": "Tokens",
  "nativeScript.assetHolders": "Asset Holders",
  "nativeScript.filter.timelocked.open": "Open",
  "nativeScript.filter.timelocked.locked": "Locked",
  "nativeScript.filter.multiSig.yes": "Yes",
  "nativeScript.noToken": "No Tokens Found",
  "nativeScript.filter.multiSig.no": "No",
  "CIP20.transactionMessage": "Transaction Message",
  "CIP20.viewMessage": "View Raw Metadata",
  "CIP20.showMore": "Show More",
  "CIP20.showLess": "Show Less",
  "CIP83.decryptMessage": "Decrypt Message",
  "CIP83.passphrase": "Passphrase",
  "CIP83.notSupportEnc": "Encryption Method Not Supported",
  "CIP83.noticeAutoDecrypt": "If the default passphrase “cardano” is used, the message will be decrypted automatically",
  "pool.actionType": "Action Type",
  "pool.votingPower": "Voting Power",
  "pool.treasury": "Treasury Withdrawal",
  "pool.status": "Status",
  "pool.actionId": "Governance Action ID",
  "pool.vote": "Vote",
  "pool.votes": "Votes",
  "pool.currentStatus": "Current Status",
  "pool.votingPowerADA": "Voting Power ADA",
  "pool.submission": "Submission Date",
  "pool.expiryDate": "Expiry Date",
  "pool.anchorText": "Anchor Text",
  "pool.searchAnchorText": "Search Anchor Text",
  "pool.any": "Any",
  "pool.open": "Open Ballot",
  "pool.ratified": "Ratified",
  "pool.enacted": "Enacted",
  "pool.dropped": "Dropped",
  "pool.yes": "Yes",
  "pool.no": "No",
  "pool.abstain": "Abstain",
  "pool.none": "None",
  "pool.typeMotion": "Motion of No-Confidence",
  "pool.typeConstitutional": "Constitutional Committee Updates",
  "pool.typeUpdate": "Update to the Constitutional or proposal policy",
  "pool.typeHardFork": "Hard-Fork Initiation",
  "pool.typeProtocol": "Protocol Parameter Changes",
  "pool.typeTreasury": "Treasury Withdrawals",
  "pool.typeInfo": "Info",
  "pool.dateRange": "Date Range",
  "pool.repeatVotes": "Repeat Votes",
  "pool.votingHistory": "Voting History",
  "pool.currentVote": "Current Vote",
  "pool.normalState": "New comittee/threshold",
  "pool.state": "New comiitee/threshold (state of no-confidence)",
  "pool.harkFork": "Hard-fork initiation",
  "pool.Infor": "Infor",
  "pool.tabPool": "The vote cast on the blockchain by Pool Name.",
  "pool.tabPoolDrep": "The vote cast on the blockchain by Drep.",
  "pool.overall": "Votes cast on the blockchain by Delegated Representatives (DReps), Stake Pool Operators (SPOs), and members of the Constitutional Committee.",
  "pool.actionMetadata": "Governance Action Metadata",
  "pool.anchor": "Anchor",
  "pool.metadata": "Metadata",
  "pool.poolName": "Pool Name",
  "pool.poolSize": "Pool Size",
  "pool.poolPledge": "Pledge",
  "pool.poolSaturation": "Saturation",
  "pool.poolLifetime": "Blocks lifetime",
  "pool.poolParticipation": "Participation Rate",
  "pool.poolVoting": "Voting Power",
  "pool.poolSearchName": "Search Name, Ticker",
  "pool.metadataSearch": "Metadata Search",
  "pool.searchMetadata": "Search Metadata",
  "pool.listOfPools": "List of Pools",
  "protocolParameters.network": "Network parameters ensure efficient data transmission and processing within the Cardano blockchain.\nTo learn more about the different Network Parameters, click ",
  "protocolParameters.economic": "Economic parameters influence the financial aspects of the Cardano network.\nTo learn more about the different Economic Parameters, click ",
  "protocolParameters.technical": "Technical parameters guide the operation and performance of staking pools and Plutus scripts.\nTo learn more about the different Technical Parameters, click ",
  "protocolParameters.governance": "Governance parameters support the decentralized decision-making process.\nTo learn more about the different Governance Parameters, click ",
  "smartContract.plutusDes.title": "What Are Plutus Scripts?",
  "smartContract.plutusDes.desc1": "Plutus is the native smart contract language for Cardano.",
  "smartContract.plutusDes.desc2": "is the initial version of Plutus, introduced in the Alonzo hard fork",
  "smartContract.plutusDes.desc3": "was introduced with the Vasil hard fork with flexibility, scalability and efficiency improvements to further enhance smart contract development",
  "bolsini.contentIdentifiers": "Content Identifier",
  "bolsini.verified": "Verified",
  "bolsini.invalid": "Invalid",
  "bolsini.wineries": "Wineries",
  "bolsini.winery": "Winery",
  "bolsini.viewWineLots": "View Wine Lots",
  "bolnisi.wineName": "Wine Name",
  "bolnisi.origin": "Origin",
  "bolnisi.countryOfOrigin": "Country of Origin",
  "bolnisi.producedBy": "Produced By",
  "bolnisi.producerAddress": "Producer Address",
  "bolnisi.producerLatitude": "Producer Latitude",
  "bolnisi.producerLongitude": "Produced Longitude",
  "bolnisi.varietalName": "Verietal Name",
  "bolnisi.vintageYear": "Vintage Year",
  "bolnisi.wineType": "Wine Type",
  "bolnisi.wineColor": "Wine Color",
  "bolnisi.harvestDate": "Harvest Date",
  "bolnisi.titleModal": "Georgian Wine",
  "bolnisi.verifyErrorTooltip": "A connection to the verification service could not be established.",
  "bolnisi.verifyErrorTooltipTryAgain": "Please, refresh the page to try again.",
  "bolnisi.verifyError": "Verification Unavailable",
  "account.myProfile": "My Profile",
  "drep.filter.drepId": "DReps ID",
  "drep.filter.drepIdSearch": "Search ID",
  "drep.filter.anchorHash": "Anchor Hash",
  "drep.filter.anchorHashSearch": "Search Hash",
  "drep.filter.activeStake": "Active Stake",
  "drep.filter.status": "Current Status",
  "drep.filter.registrationDate": "Registration Date",
  "drep.updateConstitution": "Update to the Constitution",
  "drep.protocolChange": "Protocol Parameter Changes",
  "drep.treasuryWithdrawals": "Treasury Withdrawals",
  "drep.des": "DRep Metadata",
  "drep.activeVoteStake": "Active Voting Stake",
  "drep.ccMembers": "CC Members",
  "drep.threshold": "Threshold",
  "drep.remaining": "Remaining",
  "drep.SPODisable": "SPOs cannot cast votes for this governance action",
  "drep.CCDisable": "Constitutional committee is not eligible to vote on this governance action",
  "drep.activeVoteStakeTooltip": "The active voting stake is the amount of participating stake involved in this governance action.",
  "drep.thresholdTooltip": "The threshold is the amount of ADA from yes votes required for this governance action to be ratified.",
  "drep.remainingTooltip": "The remaining ADA shows the amount of ADA from participants still left to be voted.",
  "drep.liveStake": "Live Stake",
  "drep.votingParticipation": "Voting Participation",
  "drep.lifetimeVotes": "Lifetime Votes",
  "drep.governanceVotes": "Governance Votes",
  "drep.abstainInfo": "ABSTAIN INFORMATION",
  "drep.abstainInfoTitle": "Abstain Information",
  "drep.abstainInfoDescriptionDrep": "The active voting stake is decreased if any of the participating DRep’s ADA is used to vote abstain. This then changes the amount of ADA required to reach the governance action’s ratification threshold.",
  "drep.abstainInfoDescriptionSPOs": "The active voting stake is decreased if any of the participating SPO’s ADA is used to vote abstain. This then changes the amount of ADA required to reach the governance action’s ratification threshold.",
  "drep.abstainInfoDescriptionCC": "The number of Constitutional Committee (CC) Members are decreased if any of the participating CC’s vote abstain. This then changes the amount of CC Members required to reach the governance action’s ratification threshold.",
  "drep.certificatesHistory": "Drep Certificates History",
  "drep.abstainActiveVoteStake": "Starting Active Voting Stake",
  "drep.abstainCurrentVoteStake": "Current Active Voting Stake",
  "drep.abstainCCTotal": "Starting CC Members",
  "drep.abstainCCCurent": "Current CC Members",
  "drep.abstainAmount": "Abstained Amount",
  "drep.disclaimer": "Please be aware that by clicking the external links, you will be directed to an external website. We do not control or endorse the content, products, or services provided on this site. Additionally, we cannot guarantee the accuracy, relevance, or security of the information found on external pages.",
  "drep.disclaimer.des1": "Please be aware that by clicking the link below, you will be directed to an external website. We do not control or endorse the content, products, or services provided on this site. Additionally, we cannot guarantee the accuracy, relevance, or security of the information found on external pages.",
  "drep.disclaimer.des2": "By clicking the link, you acknowledge that you understand the risks associated with visiting external sites and agree to proceed at your own discretion.",
  "token.metadataCheck": "Metadata Check",
  "status.inActive": "INACTIVE",
  "overview.status.active": "Active",
  "overview.status.accepted": "Accepted",
  "overview.status.enacted": "Enacted",
  "overview.status.expired": "Expired"
}

